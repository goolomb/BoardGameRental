/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package bestguiever;

import boardgamerental.BoardGame;
import boardgamerental.BoardGameManagerImpl;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.table.TableColumnModel;
import org.apache.commons.dbcp.BasicDataSource;

/**
 *
 * @author Goolomb
 */
public class FindBoardGame extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(FindBoardGame.class.getName());
    BasicDataSource basicDataSource = new BasicDataSource();
    BoardGameManagerImpl bgManager;
    /**
     * Creates new form FindBoardGame
     */
    public FindBoardGame() {
        try {
            setUp();
        } catch (IOException ex) {
	    String msg = "Application setup failed.";
            LOGGER.log(Level.SEVERE, msg, ex);
        }
        
        initComponents();
        
        bgManager = new BoardGameManagerImpl();
        bgManager.setDataSource(basicDataSource);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void setUp() throws IOException {
        Properties configFile = new Properties();
        configFile.load(new FileInputStream("src/DBprop.properties"));
	BasicDataSource bds = new BasicDataSource();
	bds.setUrl( configFile.getProperty( "url" ) );
	bds.setPassword( configFile.getProperty( "password" ) );
	bds.setUsername( configFile.getProperty( "username" ) );
	basicDataSource = bds;
    }
    
    BoardGameTableModel boardGameTableModel;
    private BoardGamesSwingWorker bGamesSwingWorker;

    private class BoardGamesSwingWorker extends SwingWorker<Void, BoardGame> {

        @Override
        protected Void doInBackground() throws Exception {
            Set<BoardGame> byName;
            Set<BoardGame> byPlayers;
            Set<BoardGame> byCategory;
            Set<BoardGame> byPrize;

            String name = jTextName.getText();
            int players = (Integer) jSpinnerPlayers.getValue();
            String category = (String) jComboBoxCategory.getSelectedItem();
            BigDecimal price = new BigDecimal((Integer) jSpinnerPrize.getValue());

            List<Set<BoardGame>> sets = new ArrayList<>();
            Set<BoardGame> result = new HashSet<>();
            
            if (!name.equals("")) {
                List<BoardGame> p = bgManager.findBoardGameByName(name);
                byName = new HashSet<>(p);
                sets.add(byName);
            }

            if (!(players == 0)) {
                byPlayers = new HashSet<>(bgManager.findBoardGameByPlayers(players));
                sets.add(byPlayers);
            }

            if (!category.equals("None")) {
                byCategory = new HashSet<>(bgManager.findBoardGameByCategory(category));
                sets.add(byCategory);
            }

            if (!(price.compareTo(new BigDecimal(0)) == 0)) {
                byPrize = new HashSet<>(bgManager.findBoardGameByPricePerDay(price));
                sets.add(byPrize);
            }
            
            if (!sets.isEmpty()) {
                result = sets.get(0);
                sets.remove(0);
                for (Set<BoardGame> set: sets){
                    result.retainAll(set);
                }
            }
            
            boardGameTableModel = (BoardGameTableModel) jTableBoardGames.getModel();
            boardGameTableModel.clear();
            boardGameTableModel.setBGManager(bgManager);
            int counter = 0;
            for (BoardGame bGame : result) {
                counter++;
                publish(bGame);
                setProgress(counter);
            }
            return null;
        }
	
	@Override
	protected void process(List<BoardGame> items) {
	    for (BoardGame i : items) {
                boardGameTableModel.addBoardGame(i);
	    }
	}

        @Override
        protected void done() {
            //customers_load.setEnabled(true);
            jProgressBarBG.setValue(100);
            bGamesSwingWorker = null;
        }
    }
   
    private PropertyChangeListener boardGamesProgressListener = new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (evt.getPropertyName().equals("progress")) {
                jProgressBarBG.setValue((Integer) evt.getNewValue());
            }
        }
    };
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextName = new javax.swing.JTextField();
        jLabelNumberOfPlayers = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox();
        JButtonMaxPrice = new javax.swing.JLabel();
        jButtonSearch = new javax.swing.JButton();
        jSpinnerPlayers = new javax.swing.JSpinner(new SpinnerNumberModel(0,0,99,1));
        jButtonBack = new javax.swing.JButton();
        jLabelSearch = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jLabelCategory = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBoardGames = new javax.swing.JTable();
        jProgressBarBG = new javax.swing.JProgressBar();
        jSpinnerPrize = new javax.swing.JSpinner(new SpinnerNumberModel(0,0,1000,50));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNameActionPerformed(evt);
            }
        });

        jLabelNumberOfPlayers.setText("Number of players:");

        List<String> cat = new ArrayList(Arrays.asList(new AddBoardGame().categories));
        cat.add("None");
        jComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel(cat.toArray()));
        jComboBoxCategory.setSelectedItem("None");

        JButtonMaxPrice.setText("Max. price:");

        jButtonSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jLabelSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelSearch.setText("Search");

        jLabelName.setText("Name:");

        jLabelCategory.setText("Category:");

        int maxWidth = 25;
        int preferredWidth = 20;
        jTableBoardGames.setModel(new BoardGameTableModel());
        jTableBoardGames.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        //jTableBoardGames.setDefaultRenderer(Set.class, new SetCellRenderer());
        jTableBoardGames.setSelectionMode (0);
        TableColumnModel columnModel = jTableBoardGames.getColumnModel();
        columnModel.getColumn(0).setMaxWidth(maxWidth);
        columnModel.getColumn(0).setPreferredWidth(preferredWidth);
        columnModel.getColumn(2).setMaxWidth(maxWidth * 2);
        columnModel.getColumn(2).setPreferredWidth(preferredWidth * 2);
        columnModel.getColumn(3).setMaxWidth(maxWidth * 2);
        columnModel.getColumn(3).setPreferredWidth(preferredWidth * 2);
        columnModel.getColumn(5).setMaxWidth(45);
        columnModel.getColumn(5).setPreferredWidth(40);
        jScrollPane1.setViewportView(jTableBoardGames);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(JButtonMaxPrice)
                            .addComponent(jLabelNumberOfPlayers)
                            .addComponent(jLabelCategory)
                            .addComponent(jLabelName)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButtonBack)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSearch)
                    .addComponent(jSpinnerPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButtonSearch))
                    .addComponent(jSpinnerPrize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBarBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))
                .addGap(0, 21, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBoxCategory, jTextName});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonBack)
                            .addComponent(jLabelSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelName)
                            .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNumberOfPlayers)
                            .addComponent(jSpinnerPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCategory))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JButtonMaxPrice)
                            .addComponent(jSpinnerPrize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNameActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        new openingTable().setVisible(true);
        dispose(); 
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        
        bGamesSwingWorker = new FindBoardGame.BoardGamesSwingWorker();
        bGamesSwingWorker.addPropertyChangeListener(boardGamesProgressListener);
        bGamesSwingWorker.execute();
    }//GEN-LAST:event_jButtonSearchActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindBoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindBoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindBoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindBoardGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FindBoardGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JButtonMaxPrice;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox jComboBoxCategory;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelNumberOfPlayers;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JProgressBar jProgressBarBG;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerPlayers;
    private javax.swing.JSpinner jSpinnerPrize;
    private javax.swing.JTable jTableBoardGames;
    private javax.swing.JTextField jTextName;
    // End of variables declaration//GEN-END:variables
}
